/**
 * 미사일을 최소로 사용해서 모든 폭격 미사일을 요격
 *
 * 2차원 공간에서, 상대가 발사한 폭격미사일은 x 축에 평행한 직선 형태의 모양이며 개구간을 나타내는 정수 쌍 (s, e) 형태로 표현됨
 * 요격 미사일: x 좌표에서 y 축에 수평이 되도록 발사. 해당 x좌표에 있는 모든 폭격 미사일을 관통하여 한 번에 요격 가능
 * 단, 개구간 (s, e)로 표현되는 폭격 미사일은 s와 e에서 발사하는 요격 미사일로는 요격 불가
 *
 * @param  {[s:number,e:number][]} targets - 폭격미사일의 x좌표 개구간을 담은 배열, 0 ≤ s < e ≤ 100,000,000
 **/

function solution(targets) {
  // 마지막 좌표를 기준으로 정렬
  // 정렬된 targets를 돌면서,
  // 마지막 끝 점에서 미사일 발사 (개구간이므로 [마지막끝점-1, 마지막끝점]에서 발사)
  // 미사일 발사된 좌표를 업데이트해가면서, 시작점이 미사일 발사된 좌표보다 크거나 같을 때 (개구간) 발사
  targets.sort((a, b) => a[1] - b[1]);

  let count = 0; // 발사한 미사일 수
  let currentMissile = -1; // 현재 가장 많은 미사일 요격이 가능한 X좌표 지점

  targets.forEach(([s, e]) => {
    if (s >= currentMissile) {
      count++;
      currentMissile = e;
    }
  });

  return count;
}
